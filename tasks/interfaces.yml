---

- block:
    # Filter out addresses used to connect to host.
    - name: interfaces | Build LVS node real IPs list
      set_fact:
        lvs_node_rips: "{{ lvs_node_rips + [item] }}"
      when: not (item.address | ipaddr('address'))
                in  [ansible_host] + ansible_env.SSH_CONNECTION.split(' ')
      loop: "{{ lvs_node_groups }}"
      # Fix syntax highlighting in vim'

    # Filter out addresses used to connect to host.
    - name: interfaces | Build LVS director virtual IPs list
      set_fact:
        lvs_director_vips: "{{ lvs_director_vips + [item.1] }}"
      when: not (item.1.address | ipaddr('address'))
                in  [ansible_host] + ansible_env.SSH_CONNECTION.split(' ')
      loop: "{{ lvs_director_groups | subelements('virtual_addresses') }}"
      # Fix syntax highlighting in vim"

    - name: interfaces | Build VRRP virtual IPs list
      set_fact:
        vrrp_vips: >-
          {{ vrrp_vips + item.addresses
                | map(attribute='address') | map('ipaddr', 'address')
                | list
          }}
      loop: "{{ vrrp }}"

    - name: interfaces | Build VRRP unicast source IPs list
      set_fact:
        vrrp_unicast_src_ips: >-
          {{ vrrp_unicast_src_ips + [item.unicast_src_ip]
          }}
      loop: "{{ vrrp_conf }}"

    - name: interfaces | Show LVS node real IPs list
      debug:
        var: lvs_node_rips
    - name: interfaces | Show LVS director virtual IPs list
      debug:
        var: lvs_director_vips
    - name: interfaces | Show VRRP virtual IPs list
      debug:
        var: vrrp_vips
    - name: interfaces | Show VRRP unicast source IPs list
      debug:
        var: vrrp_unicast_src_ips

    # Filter out addresses with undefined iface and virtual VRRP addresses.
    - name: interfaces | Build interfaces IPs list
      set_fact:
        interfaces_ips: >-
          {{ interfaces_ips + [item] }}
      when: item['iface'] is defined
              and not (item.address | ipaddr('address')) in vrrp_vips
      loop: "{{ lvs_node_rips + lvs_director_vips + vrrp_unicast_src_ips }}"

    - name: interfaces | Show interfaces IPs list
      debug:
        var: interfaces_ips

    # Note, _equal_ IPs with different prefix will _not_ be merged into one.
    - name: interfaces | Build interfaces config
      set_fact:
        interfaces_conf: >-
          {{ interfaces_conf | combine(
              { item.iface : (cur_iface + [item.address | ipaddr('host')]) | unique
              })
          }}
      vars:
        cur_iface: >-
          {{ interfaces_conf[item.iface] }}
      loop: "{{ interfaces_ips }}"

    - name: interfaces | Show interfaces conf
      debug:
        var: interfaces_conf


- block:

    # I need iface aliases, because otherwise `resolvconf` will overwrite
    # dns-nameservers info of main interface from the last alias (which has no
    # dns nameservers defined).
    # Also, empty line at the end of `block` is required, because otherwise
    # task won't run at all, when there is _no_ IPs to define (thus, leaving
    # previous (now probably incorrect) configuration as is).
    - name: interfaces | Add LVS IPs to interfaces
      blockinfile:
        path: '/etc/network/interfaces'
        backup: yes
        marker: "{{ '# {mark} ANSIBLE MANAGED LVS ' + item.key + ' interface' }}"
        block: |
          {% for addr in item.value %}
          auto {{ item.key }}:{{ 100 + loop.index0 }}
          iface {{ item.key }}:{{ 100 + loop.index0 }}  inet static
            address {{ addr | ipaddr('address') }}
            netmask {{ addr | ipaddr('netmask') }}
          {% endfor %}

      loop: "{{ interfaces_conf | dict2items }}"

