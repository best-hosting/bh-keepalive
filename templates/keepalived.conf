global_defs {
        notification_email {
                {{ notification_email | join('\n') | indent(16) }}
        }
{% if notification_email_from is defined %}
        notification_email_from {{ notification_email_from }}
{% endif %}
        smtp_server 127.0.0.1
{% if vrrp[0] is defined %}
        lvs_sync_daemon {{ vrrp[0].lvs_sync_iface }} {{ vrrp[0].instance }} {% if vrrp[0].lvs_sync_id is defined %} {{ vrrp[0].lvs_sync_id }} {% endif %}
{% endif %}

}

{% for v in vrrp %}
vrrp_instance {{ v.instance }} {
        state {{ v.state }}
        interface {{ v.iface }}
        version 2
        virtual_router_id {{ v.vrid }}
        preempt_delay 60
        priority {% if v.priority is defined %} {{ v.priority }} {% elif v.state == 'MASTER' %} 255 {% else %} 100 {% endif %}

        authentication {
                auth_type PASS
                auth_pass huy
        }
        virtual_ipaddress {
{% for i in v.addresses %}
                {{ i.address | ipaddr('address') }}/{{ i.address | ipaddr('prefix') }}
{% endfor %}
        }
        #promote_secondaries
        use_vmac {{ v.instance }}
        # Required if `unicast_peer` is used together with `use_vmac` .
        vmac_xmit_base
        # Unicast VRRP announcements are sent _directly_ from vrrp interface,
        # _without_ routing.  Thus, peer should be reachable through VRRP
        # interface.
        #unicast_src_ip {{ ansible_host }}
        unicast_peer {
                {{ v.unicast_peer | join('\n') | indent(16) }}
        }
}
{% endfor %}

{% for g in lvs_director %}

{% if g.fwmark is not defined %}
virtual_server_group {{ g.name }} {
{% for i in g.virtual_addresses %}
        {{ i }} {{ g.port }}
{% endfor %}
}
{% endif %}

{% if g.fwmark is defined %}
virtual_server fwmark {{ g.fwmark }} {
{% else %}
virtual_server group {{ g.name }} {
{% endif %}
        lvs_sched   {{ g.lvs_sched }}
        lvs_method  {{ g.lvs_method }}
        protocol TCP
        delay_loop  {{ g.delay_loop }}
{% if g.persistence_timeout is defined %}
        persistence_timeout {{ g.persistence_timeout }}
{% endif %}
{% for r in g.real_addresses %}
        real_server {{ r }} {% if g.fwmark is not defined %} {{ g.port }} {% endif %} {
{% if   g.node_check == 'ssl_get' %}
                SSL_GET {
                        url {
                                path /
                                status_code 200
                        }
                        connect_port {{ g.port }}
                        connect_timeout {{ g.connect_timeout }}
                        retry {{ g.retry }}
                }
{% elif g.node_check == 'http_get' %}
                HTTP_GET {
                        url {
                                path /
                                status_code {{ g.http_rcode | default(200) }}
                        }
                        connect_port {{ g.port }}
                        connect_timeout {{ g.connect_timeout }}
                        retry {{ g.retry }}
                }
{% elif g.node_check == 'tcp_check' %}
                TCP_CHECK {
                        connect_port {{ g.port }}
                        connect_timeout {{ g.connect_timeout }}
                        retry {{ g.retry }}
                }
{% endif %}
        }
{% endfor %}
}

{% endfor %}
